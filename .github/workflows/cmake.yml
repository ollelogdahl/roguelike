name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -yq libsdl2-dev
        sudo apt-get install -yq libsdl2-image-dev
        sudo apt-get install -yq libpugixml-dev
    
    #- name: Cache Dependencies
    #  # Install all needed dependencies. These are SDL2, SDL2_image and pugixml.
    #  uses: actions/cache@v2.1.3
    #  id: cache-deps
    #  with:
    #    path: "~/deps"
    #    key: deps

    #- name: Install Dependencies
    #  env:
    #    CACHE_HIT: ${{steps.cache-deps.outputs.cache-hit}}
    #  run: |
    #    if [[ "$CACHE_HIT" == 'true' ]]; then
    #      sudo cp --force --recursive ~/deps/* /
    #    else
    #      sudo apt-get update && sudo apt-get install -yq libsdl2-dev libsdl2-image-dev libpugixml-dev
    #      mkdir -p ~/deps
    #      for dep in libsdl2-dev libsdl2-image-dev libpugixml-dev; do
    #        dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done |
    #          xargs cp --parents --target-directory ~/deps/
    #      done
    #    fi

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_COMPILER=g++-10

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
      env:
        MAKEFLAGS: "-j2"
    
    - name: Upload Build
      uses: actions/upload-artifact@v2.2.1
      with:
        name: Build
        path: ${{runner.workspace}}/build/roguelike
